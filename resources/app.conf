[cli]
class_name = zensols.cli.ActionCliManager
# the list of applications to invoke on start up
apps = list: pkg_cli, log_cli, config_cli, list_actions_cli, export_env_cli, show_config_cli, info_app
# declare sections to remove
cleanups = list: pkg_cli, log_cli, config_cli, list_actions_cli, export_env_cli, show_config_cli,
	 info_app, cli
# there are needed to print the configuration: package
# set the default actions
default_action = doit

[log_cli]
class_name = zensols.cli.LogConfigurator
log_name = ${package:name}
#config_file = resource: resources/log.conf
#format = %%(asctime)-15s %%(message)s
format = %%(asctime)s[%%(levelname)s]:%%(name)s %%(message)s
#default_level = debug
#default_app_level = warn

[pkg_cli]
class_name = zensols.cli.PackageInfoImporter

[config_cli]
class_name = zensols.cli.ConfigurationImporter
type = import
section = config_import

[show_config_cli]
class_name = zensols.cli.ShowConfiguration

[import]
sections = list: imp_env

[imp_env]
type = environment
section_name = env
includes = set: GITUSER

[config_import]
sections = list: config_imp
# the test configuration file needs interpolates the following sections
references = list: package, env

[config_imp]
type = importini
# source the config file for forward propogating option interpolation; then
# source the object factory sections, finally source the configuration file
# again for any section overwrites
config_files = list: 
    ^{config_path},
    resource: resources/obj.conf,
    ^{config_path}

[list_actions_cli]
class_name = zensols.cli.ListActions

[export_env_cli]
class_name = zensols.cli.ExportEnvironment
section = export_vars

[info_app]
class_name = zensols.garmdown.InfoApplication
#manager = instance: manager
fetcher = instance: fetcher